[MASTER]
fail-under=10
jobs=1
limit-inference-results=100
persistent=yes
suggestion-mode=yes
unsafe-load-any-extension=no
extension-pkg-whitelist=pydantic


[MESSAGES CONTROL]
confidence=
disable=unsubscriptable-object,  # false-positives due to typing
        inherit-non-class,
        no-member,  # found by mypy
        unused-variable,
        invalid-name,
        missing-function-docstring,
        missing-module-docstring,
        too-many-ancestors,
        line-too-long,
        fixme,
        too-many-arguments,
        missing-class-docstring,
        too-few-public-methods,
        too-many-locals,
        duplicate-code,

enable=c-extension-no-member


[REPORTS]

# Python expression which should return a score less than or equal to 10. You
# have access to the variables 'error', 'warning', 'refactor', and 'convention'
# which contain the number of messages in each category, as well as 'statement'
# which is the total number of statements analyzed. This score is used by the
# global evaluation report (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

output-format=colorized
reports=no
score=yes


[REFACTORING]

max-nested-blocks=5
never-returning-functions=sys.exit


[BASIC]

argument-naming-style=snake_case
attr-naming-style=snake_case
bad-names=
bad-names-rgxs=
class-attribute-naming-style=any
class-naming-style=PascalCase
const-naming-style=UPPER_CASE
docstring-min-length=-1
function-naming-style=snake_case
good-names=i,
           j,
           k,
           ex,
           Run,
           _

include-naming-hint=no
inlinevar-naming-style=any
method-naming-style=snake_case
module-naming-style=snake_case
name-group=
no-docstring-rgx=^_
property-classes=abc.abstractproperty
variable-naming-style=snake_case

[VARIABLES]

additional-builtins=
allow-global-unused-variables=no
callbacks=cb_
dummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_
ignored-argument-names=_.*
init-import=no
redefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io


[SPELLING]

max-spelling-suggestions=4

# Spelling dictionary name. Available dictionaries: none. To make it work,
# install the python-enchant package.
spelling-dict=

spelling-ignore-words=
spelling-private-dict-file=
spelling-store-unknown-words=no


[SIMILARITIES]

ignore-comments=yes
ignore-docstrings=yes
ignore-imports=yes
min-similarity-lines=4


[STRING]

check-quote-consistency=yes
check-str-concat-over-line-jumps=yes

[LOGGING]

# The type of string formatting that logging methods do. `old` means using %
# formatting, `new` is for `{}` formatting.
logging-format-style=old

# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules=logging


[TYPECHECK]

# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators=contextlib.contextmanager

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
generated-members=

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# Tells whether to warn about missing members when the owner of the attribute
# is inferred to be None.
ignore-none=yes

# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference
# can return multiple potential results while evaluating a Python object, but
# some branches might not be evaluated, which results in partial inference. In
# that case, it might be useful to still emit no-member and other checks for
# the rest of the inferred objects.
ignore-on-opaque-inference=yes

# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes=optparse.Values,thread._local,_thread._local

# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis). It
# supports qualified module names, as well as Unix pattern matching.
ignored-modules=

# Show a hint with possible names when a member name was not found. The aspect
# of finding the hint is based on edit distance.
missing-member-hint=yes

# The minimum edit distance a name should have in order to be considered a
# similar match for a missing member name.
missing-member-hint-distance=1

# The total number of similar names that should be taken in consideration when
# showing a hint for a missing member.
missing-member-max-choices=1

# List of decorators that change the signature of a decorated function.
signature-mutators=


[FORMAT]

expected-line-ending-format=
ignore-long-lines=^\s*(# )?<?https?://\S+>?$
indent-after-paren=4
indent-string='    '
max-line-length=120  # as for black
max-module-lines=1000
single-line-class-stmt=no
single-line-if-stmt=no


[MISCELLANEOUS]

notes=FIXME,
      TODO



[IMPORTS]

allow-any-import-level=
allow-wildcard-with-all=no
analyse-fallback-blocks=no
deprecated-modules=optparse,tkinter.tix
ext-import-graph=
import-graph=
int-import-graph=
known-standard-library=
known-third-party=enchant
preferred-modules=


[CLASSES]

defining-attr-methods=__init__,
                      __new__,
                      __post_init__
exclude-protected=_asdict,
                  _fields,
                  _replace,
                  _source,
                  _make

valid-classmethod-first-arg=cls
valid-metaclass-classmethod-first-arg=mcls


[DESIGN]

max-args=5
max-attributes=7
max-bool-expr=5
max-branches=12
max-locals=15
max-parents=7
max-public-methods=20
max-returns=6
max-statements=50
min-public-methods=2


[EXCEPTIONS]

overgeneral-exceptions=BaseException,
                       Exception
